<problem display_name="groupByKey" markdown="a=sc.parallelize([(1,2), (1,-5), (7,30), (9,6), (1,3), (7,-2), (1,-3), (7,-1), (1,4)])&#10;a.groupByKey().map(lambda k : (k[0], [x for x in k[1]]))&#10;What does a.collect() give?&#10;&#10;( ) [(1, 1), (9, 6), (7, 27)]&#10;( ) [(1, (2, -5, 3, -3, 4)), (9, (6)), (7, (30, -2, -1))]&#10;(x) [(1, [2, -5, 3, -3, 4]), (9, [6]), (7, [30, -2, -1])]&#10;( ) [(1, (2, -5, -3, 4)), (9, (6)), (7, (30, -2, -1))]&#10;">
<multiplechoiceresponse>
  <p>a=sc.parallelize([(1,2), (1,-5), (7,30), (9,6), (1,3), (7,-2), (1,-3), (7,-1), (1,4)])</p>
<p>a.groupByKey().map(lambda k : (k[0], [x for x in k[1]]))</p>
<p>What does a.collect() give?</p>
<choicegroup type="MultipleChoice">
    <choice correct="false">[(1, 1), (9, 6), (7, 27)]</choice>
    <choice correct="false">[(1, (2, -5, 3, -3, 4)), (9, (6)), (7, (30, -2, -1))]</choice>
    <choice correct="true">[(1, [2, -5, 3, -3, 4]), (9, [6]), (7, [30, -2, -1])]</choice>
    <choice correct="false">[(1, (2, -5, -3, 4)), (9, (6)), (7, (30, -2, -1))]</choice>
  </choicegroup>
</multiplechoiceresponse>
</problem>
